{"version":3,"sources":["components/preview/index.jsx","components/home.jsx","App.js","reportWebVitals.js","index.js"],"names":["Text","Typography","Preview","props","previewSong","open","toggleOpen","console","log","Form","useForm","form","useState","gradStart","setGradStart","gradEnd","setGradEnd","textColor","setTextColor","title","placement","width","onClose","visible","initialValues","start","end","text","layout","Item","label","value","onChange","e","target","type","placeholder","className","style","background","color","src","image","url","alt","name","artist","code","details","st","encodeURIComponent","ed","txt","sUrl","getQuery","Search","Input","Home","currSong","setSong","songs","setSongList","setOpen","currSelectedSong","setSelectedSong","loaded","setLoading","a","fetch","method","headers","body","JSON","stringify","result","json","parsedResult","onSearch","marginBottom","enterButton","itemLayout","dataSource","loading","renderItem","item","actions","onClick","avatar","Meta","size","description","App","class","fontSize","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.297df757.chunk.js","sourcesContent":["import React, {useState} from \"react\";\nimport \"./index.css\";\nimport { Form, Input, Drawer, Typography  } from 'antd';\n\nconst { Text } = Typography;\n\nexport function Preview(props) {\n    const { previewSong, open, toggleOpen } = props;\n    console.log(props);\n    const [form] = Form.useForm();\n    const [gradStart, setGradStart] = useState('#e66465');\n    const [gradEnd, setGradEnd] = useState('#9198e5');\n    const [textColor, setTextColor] = useState('#FFFFFF');\n\n    function getQuery() {\n        let details = {\n            st: encodeURIComponent(gradStart),\n            ed: encodeURIComponent(gradEnd),\n            txt: encodeURIComponent(textColor),\n            name: previewSong.name,\n            sUrl: previewSong.image.url,\n            artist: previewSong.artist\n        }\n        return `st=${details.st}&ed=${details.ed}&txt=${details.txt}&name=${details.name}&sUrl=${details.sUrl}&artist=${details.artist}`\n    }   \n    \n    if(!previewSong) return null;\n    return (\n        <Drawer\n        title={`Preview song card`}\n        placement=\"right\"\n        width=\"800\"\n        onClose={() =>toggleOpen(false)}\n        visible={open}\n      >\n        <Form\n            form={form}\n            initialValues={{\n                start: gradStart,\n                end: gradEnd,\n                text: textColor\n            }}\n            layout=\"vertical\"\n        >\n            <Form.Item label=\"Gradient Start\">\n                <Input value={gradStart} onChange={(e) => setGradStart(e.target.value)} type=\"color\" placeholder=\"input placeholder\" />\n            </Form.Item>\n            <Form.Item label=\"Gradient End\">\n                <Input value={gradEnd} onChange={(e) => setGradEnd(e.target.value)} type=\"color\" placeholder=\"input placeholder\" />\n            </Form.Item>\n            <Form.Item label=\"Text Color\">\n                <Input value={textColor} onChange={(e) => setTextColor(e.target.value)} type=\"color\" placeholder=\"input placeholder\" />\n            </Form.Item>\n        </Form>\n        <div className=\"song-card\" style={{background: `linear-gradient(${gradStart}, ${gradEnd})`, color: `${textColor}`}}>\n            <img src={previewSong.image.url} alt=\"song image\"/>\n            <div className=\"song-details\">\n                <div className=\"artist\">{previewSong.name}</div>\n                <div>{previewSong.artist}</div>\n            </div>\n            <div className=\"song-play\">▶️</div>\n        </div>\n        <b>Copy and paste the below mentioned code in your Github profile README to see it in action</b>\n        <br/>\n        <Text code>{`${\"[![](https://loud-snake-75.loca.lt/preview?\" + getQuery() + \"](https://www.youtube.com/watch?v=H6uLAwHTgDo)\"}`}</Text>\n      </Drawer>\n    )\n\n}","import React ,{useState} from \"react\";\nimport \"../App.css\";\nimport { Preview } from \"./preview/index\";\nimport { Input } from 'antd';\nimport { List, Avatar, Button, Skeleton } from 'antd';\nconst { Search } = Input;\nexport function Home(props) {\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const [currSong, setSong] = useState(null);\n    const [songs, setSongList] = useState([]);\n    const [open, setOpen] = useState(false);\n    const [currSelectedSong, setSelectedSong] = useState(null); \n    const [loaded, setLoading] = useState(false);\n    async function getSongs(name) {\n        setLoading(true)\n        if((currSong === name)) {\n            return\n        }\n\n        let result =  await fetch('/getSongList', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({name}),\n        });\n        const parsedResult = await result.json();\n        setSong(name);\n        setSongList(parsedResult);\n        setLoading(false)\n    }\n\n\n    return (\n        <div className=\"home\">\n                <Search placeholder=\"input search text\" onSearch={getSongs} style={{width: '100%', marginBottom: \"50px\"}} enterButton />\n                <List\n                  className=\"demo-loadmore-list\"\n                  itemLayout=\"horizontal\"\n                  dataSource={songs}\n                  loading={loaded}\n                  renderItem={item =>\n                    console.log(item) || (\n                      <List.Item\n                        actions={[<a onClick={() => {debugger;setOpen(true); setSelectedSong(item)}}>See Preview</a>]}\n                      >\n                        <Skeleton avatar title={true} loading={loaded}>\n                          <List.Item.Meta\n                            avatar={<Avatar size=\"large\" src={item.image.url} />}\n                            title={item.name}\n                            description={item.artist}\n                          />\n                        </Skeleton>\n                      </List.Item>\n                    )\n                  }\n                />\n                <Preview previewSong={currSelectedSong} open={open} toggleOpen={setOpen}/>\n        </div>\n    )\n}","import MusicNoteOutlinedIcon from '@mui/icons-material/MusicNoteOutlined';\nimport './App.css';\nimport { Home } from \"./components/home\"\nfunction App() {\n  return (\n    <div className=\"App\">\n        <div class=\"header\">\n          <MusicNoteOutlinedIcon fontSize=\"large\"/>\n          <div className=\"heading\">Song Preview Github</div>\n          <MusicNoteOutlinedIcon fontSize=\"large\"/>\n        </div>\n        <Home />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}