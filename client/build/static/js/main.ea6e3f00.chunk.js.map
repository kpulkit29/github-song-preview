{"version":3,"sources":["components/preview/index.jsx","components/home.jsx","App.js","reportWebVitals.js","index.js"],"names":["Text","Typography","Preview","props","previewSong","open","toggleOpen","Form","useForm","form","useState","gradStart","setGradStart","gradEnd","setGradEnd","textColor","setTextColor","title","placement","width","window","innerWidth","onClose","visible","initialValues","start","end","text","layout","Item","label","value","onChange","e","target","type","placeholder","className","style","background","color","src","image","url","alt","name","artist","code","details","st","btoa","ed","txt","sUrl","getQuery","videoId","Search","Input","Home","currSong","setSong","songs","setSongList","setOpen","currSelectedSong","setSelectedSong","loaded","setLoading","a","fetch","method","headers","body","JSON","stringify","result","json","parsedResult","onSearch","marginBottom","enterButton","itemLayout","dataSource","loading","renderItem","item","actions","onClick","avatar","Meta","size","description","App","class","fontSize","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ea6e3f00.chunk.js","sourcesContent":["import React, {useState} from \"react\";\nimport \"./index.css\";\nimport { Form, Input, Drawer, Typography  } from 'antd';\n\nconst { Text } = Typography;\n\nexport function Preview(props) {\n    const { previewSong, open, toggleOpen } = props;\n    const [form] = Form.useForm();\n    const [gradStart, setGradStart] = useState('#e66465');\n    const [gradEnd, setGradEnd] = useState('#9198e5');\n    const [textColor, setTextColor] = useState('#FFFFFF');\n\n    function getQuery() {\n        let details = {\n            st: window.btoa(gradStart),\n            ed: window.btoa(gradEnd),\n            txt: window.btoa(textColor),\n            name: window.btoa(previewSong.name),\n            sUrl: window.btoa(previewSong.image.url),\n            artist: window.btoa(previewSong.artist)\n        }\n        return `st=${details.st}&ed=${details.ed}&txt=${details.txt}&name=${details.name}&sUrl=${details.sUrl}&artist=${details.artist}`\n    }   \n    \n    if(!previewSong) return null;\n    return (\n        <Drawer\n        title={`Preview song card`}\n        placement=\"right\"\n        width={window.innerWidth<600 ? '400' : '800'}\n        onClose={() =>toggleOpen(false)}\n        visible={open}\n      >\n        <Form\n            form={form}\n            initialValues={{\n                start: gradStart,\n                end: gradEnd,\n                text: textColor\n            }}\n            layout=\"vertical\"\n        >\n            <Form.Item label=\"Gradient Start\">\n                <Input value={gradStart} onChange={(e) => setGradStart(e.target.value)} type=\"color\" placeholder=\"input placeholder\" />\n            </Form.Item>\n            <Form.Item label=\"Gradient End\">\n                <Input value={gradEnd} onChange={(e) => setGradEnd(e.target.value)} type=\"color\" placeholder=\"input placeholder\" />\n            </Form.Item>\n            <Form.Item label=\"Text Color\">\n                <Input value={textColor} onChange={(e) => setTextColor(e.target.value)} type=\"color\" placeholder=\"input placeholder\" />\n            </Form.Item>\n        </Form>\n        <div className=\"song-card\" style={{background: `linear-gradient(${gradStart}, ${gradEnd})`, color: `${textColor}`}}>\n            <img src={previewSong.image.url} alt=\"song image\"/>\n            <div className=\"song-details\">\n                <div className=\"artist\">{previewSong.name}</div>\n                <div>{previewSong.artist}</div>\n            </div>\n            <div className=\"song-play\">▶️</div>\n        </div>\n        <b>Copy and paste the below mentioned code in your Github profile README to see it in action</b>\n        <br/>\n        <Text code>{`${\"[![](https://song-preview-readme.herokuapp.com/preview?\" + getQuery() + \")](https://www.youtube.com/watch?v=\"+ previewSong.videoId +\")\"}`}</Text>\n      </Drawer>\n    )\n\n}","import React ,{useState} from \"react\";\nimport \"../App.css\";\nimport { Preview } from \"./preview/index\";\nimport { Input } from 'antd';\nimport { List, Avatar, Button, Skeleton } from 'antd';\nconst { Search } = Input;\nexport function Home(props) {\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const [currSong, setSong] = useState(null);\n    const [songs, setSongList] = useState([]);\n    const [open, setOpen] = useState(false);\n    const [currSelectedSong, setSelectedSong] = useState(null); \n    const [loaded, setLoading] = useState(false);\n    async function getSongs(name) {\n        setLoading(true)\n        if((currSong === name)) {\n            return\n        }\n\n        let result =  await fetch('/getSongList', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({name}),\n        });\n        const parsedResult = await result.json();\n        setSong(name);\n        setSongList(parsedResult);\n        setLoading(false)\n    }\n\n\n    return (\n        <div className=\"home\">\n                <Search placeholder=\"Type song name here\" onSearch={getSongs} style={{width: '100%', marginBottom: \"50px\"}} enterButton />\n                <List\n                  className=\"demo-loadmore-list\"\n                  itemLayout=\"horizontal\"\n                  dataSource={songs}\n                  loading={loaded}\n                  renderItem={item =>\n                    (\n                      <List.Item\n                        actions={[<a onClick={() => {debugger;setOpen(true); setSelectedSong(item)}}>See Preview</a>]}\n                      >\n                        <Skeleton avatar title={true} loading={loaded}>\n                          <List.Item.Meta\n                            avatar={<Avatar size=\"large\" src={item.image.url} />}\n                            title={item.name}\n                            description={item.artist}\n                          />\n                        </Skeleton>\n                      </List.Item>\n                    )\n                  }\n                />\n                <Preview previewSong={currSelectedSong} open={open} toggleOpen={setOpen}/>\n        </div>\n    )\n}","import MusicNoteOutlinedIcon from '@mui/icons-material/MusicNoteOutlined';\nimport './App.css';\nimport { Home } from \"./components/home\"\nfunction App() {\n  return (\n    <div className=\"App\">\n        <div class=\"header\">\n          <MusicNoteOutlinedIcon fontSize=\"large\"/>\n          <div className=\"heading\">Song Preview Github</div>\n          <MusicNoteOutlinedIcon fontSize=\"large\"/>\n        </div>\n        <Home />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}